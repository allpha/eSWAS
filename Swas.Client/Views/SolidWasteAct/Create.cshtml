@model Swas.Client.Models.SolidWasteActViewModel

@{
    ViewBag.Title = "პოლიგონზე მყარი ნარჩენების შექმნის აქტი";
}

<div class="widget-body" style="margin-top: -10px;">

    @*<div id="FormLoader" class="loading-container">
        <div class="loader"></div>
    </div>*@

    <div class="row">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4 style="margin-left: 20px">ახალი ჩანაწერი</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                <div>
                    <div class="form-horizontal col-md-6">

                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.ActDate, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.ActDate, new { htmlAttributes = new { @class = "form-control date-picker", @id = "id-date-picker-1", style = "width: 100px", @Value = Model.ActDate.ToString("MM/dd/yyyy") } })
                                @Html.ValidationMessageFor(model => model.ActDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.LandfillId, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownList("LandfillId", (IEnumerable<SelectListItem>)ViewBag.LandfillItemSource)
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.ReceiverName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.ReceiverName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReceiverName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.ReceiverLastName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.ReceiverLastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReceiverLastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.PositionName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.PositionName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PositionName, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>

                    <div class="form-horizontal col-md-6">
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("Type", (IEnumerable<SelectListItem>)ViewBag.LandTypeItemSource)
                                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.CustomerCode, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.CustomerCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CustomerCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.CustomerContactInfo, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.CustomerContactInfo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CustomerContactInfo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.RepresentativeName, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.RepresentativeName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RepresentativeName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.TransporterCarNumber, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.TransporterCarNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TransporterCarNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.TransporterCarModel, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.TransporterCarModel, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TransporterCarModel, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="input-group col-md-12">
                            @Html.LabelFor(model => model.TransporterDriverInfo, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.TransporterDriverInfo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TransporterDriverInfo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>

                <div style="padding: 30px;">

                    <div style="margin-bottom: 10px;">
                        <button id="addDetailItem" class="btn btn-primary fa fa-plus" type="button" data-toggle="modal" data-target="#SolidWasteActDetailEditor">&nbsp;&nbsp;ჩანაწერის დამატება</button>
                    </div>

                    <table id="SolidWastActDetailTable" class="table table-bordered table-hover" width="100%">
                        <thead>
                            <tr>
                                <th style="line-height: 60px;  text-align: center;">ნარჩენის ტიპი</th>
                                <th style="line-height: 60px;  text-align: center; width: 100px;">რ-ბ[ტონა]</th>
                                <th style="text-align: center; width: 100px;">ერთეულის&#13;&#10;ფასი<br /> [დღგ-ს&#13;&#10; <br />ჩათვლისთ]</th>
                                <th style="line-height: 20px;text-align: center; width: 100px;">ჯამი <br />დღგ-ს ჩათვლით</th>
                                <th style="text-align: center; width: 100px;"></th>
                            </tr>
                        </thead>
                    </table>
                </div>

                <br />

                <div class="input-group col-md-12" style="padding-right: 18px">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <div class="col-md-offset-10 col-md-12">
                        <input type="button" id="saveSolidWasteItem" value="შენახვა" class="btn btn-primary" />
                        <a class="btn btn-primary" href="/SolidWasteAct/Index">გაუქმება</a>
                    </div>
                </div>

            </div>
        }
    </div>
</div>



@using (var modal = Html.Bootstrap().Begin(new Modal().Id("SolidWasteActDetailEditor").Closeable().Size(BootstrapSizes.Normal).Color(BootstrapColors.Primary)))

{
    using (var header = modal.BeginHeader())
    {
        <h4 class="modal-title" id="myLargeModalLabel">ნარჩენის დამატება/რედაქტირება</h4>
    }
    using (var body = modal.BeginBody())
    {
        @*<img id="loading" src="~/assets/img/spinner.gif" alt="Updating ..." style="display: none; width: 100px; height:100px" />*@
        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-2">
                    @Html.Label("ნარჩენის ტიპი", new { htmlAttributes = new { @class = "control-label" } })
                </div>
                <div class="col-md-10">
                    @Html.DropDownList("WasteTypeId", (IEnumerable<SelectListItem>)ViewBag.WasteTypeItemSource)
                    @Html.ValidationMessageFor(model => model.WasteTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.Label("რაოდენობა", new { htmlAttributes = new { @class = "control-label" } })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", style = "width: 100px;" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                </div>
                <div class="col-md-10">
                    @Html.Bootstrap().CheckBox("IsCubeMeter").Text("კუბური მეტრი").IsChecked(false)
                </div>
            </div>
        </div>

        @*<div id="loading">
                <p>Processing, please wait . . . <img src="~/assets/img/spinner.gif"></p>
            </div>*@

    }
    using (var header = modal.BeginFooter())
    {
        <button class="btn btn-default" id="btSave">შენახვა</button>
        <button class="btn btn-default" id="btClose" data-dismiss="modal">გაუქმება</button>
    }
}



<style type="text/css">
    .loader {
        background: url('../../assets/img/loading.gif');
        background-repeat: no-repeat;
        background-position: right;
    }
</style>

@section PageScripts{

    <link href="~/assets/css/jquery-ui.css" rel="stylesheet" />
    <script src="//code.jquery.com/jquery-1.12.3.js"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

    @*<script src="//code.jquery.com/jquery-1.10.2.js"></script>
        <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>*@


    <script src="~/assets/js/select2/select2.js"></script>
    <script src="~/assets/js/tagsinput/bootstrap-tagsinput.js"></script>
    <script src="~/assets/js/datetime/bootstrap-datepicker.js"></script>

    <script>

        var $itemSource = [];
        var $itemIncriment = 0;
        var $editId = 0;
        var $editorMode = 'ADD';
        var $selectedRow = null;

        $(document).ready(function () {
            $('.date-picker').datepicker();
            $("#LandfillId").select2();
            $("#WasteTypeId").select2();

        });

        //$.ajaxSetup({
        //    complete: function () {
        //        $('.loading-container').removeClass('loading-inactive');

        //    },
        //    beforeSend: function () {
        //        $('.loading-container')
        //            .addClass('loading-inactive');
        //    },
        //    complete: function () {
        //        //// hide gif here, eg:
        //        //$("#loading").hide();

        //        $('.loading-container')
        //            .removeClass('loading-inactive');
        //    }
        //});


        function FindItem(wasteTypeId) {
            for (var i = 0; i < $itemSource.length; i++) {

                if ($itemSource[i].WasteTypeId == wasteTypeId) return $itemSource[i];
            }
        }

        function FindItemForEdit(wasteTypeId, editId) {
            for (var i = 0; i < $itemSource.length; i++)
                if ($itemSource[i].WasteTypeId == wasteTypeId && $itemSource[i].Id != editId) {
                    return $itemSource[i];
                }
        }

        function UpdateItemSource(wasteTypeId, quantity, unitPrice, amount) {
            for (var i = 0; i < $itemSource.length; i++) {
                if ($itemSource[i].WasteTypeId == wasteTypeId) {
                    $itemSource[i].WasteTypeId = wasteTypeId;
                    $itemSource[i].Quantity = quantity;
                    $itemSource[i].UnitPrice = unitPrice;
                    $itemSource[i].Amount = amount;
                }
            }
        }


        $('#addDetailItem').click(function () {
            $editorMode = 'ADD';
            $('#Quantity').val('0')

        });


        $('#saveSolidWasteItem').click(function () {

            $('.loading-container').removeClass('loading-inactive');

            $.ajax({
                url: "/SolidWasteAct/Create",
                type: "POST",
                dataType: "json",
                data: {
                    actDate: document.getElementById("id-date-picker-1").value,
                    landfillId: document.getElementById("LandfillId").value,
                    receiverName: document.getElementById("ReceiverName").value,
                    receiverLastName: document.getElementById("ReceiverLastName").value,
                    positionName: document.getElementById("PositionName").value,
                    type: document.getElementById("Type").value,
                    customerName: document.getElementById("CustomerName").value,
                    customerCode: document.getElementById("CustomerCode").value,
                    customerContactInfo: document.getElementById("CustomerContactInfo").value,
                    representativeName: document.getElementById("RepresentativeName").value,
                    transporterCarNumber: document.getElementById("TransporterCarNumber").value,
                    transporterCarModel: document.getElementById("TransporterCarModel").value,
                    transporterDriverInfo: document.getElementById("TransporterDriverInfo").value,
                    remark: document.getElementById("Remark").value,
                    solidWasteActDetails: $itemSource
                },
                success: function (data) {
                    $('.loading-container')
                        .addClass('loading-inactive');

                    location.href = '/SolidWasteAct/Index';
                },
                error: function (textStatus, errorThrown) {
                    $('.loading-container')
                        .addClass('loading-inactive');

                    alert("მონაცემები არ არის შენახული!")
                }
            });
        });

        $('#btSave').click(function () {

            var $wasteTypeId = document.getElementById("WasteTypeId").value;

            if (($editorMode == 'ADD' && FindItem($wasteTypeId) != null) || ($editorMode == 'EDIT' && FindItemForEdit($wasteTypeId, $editId) != null))
                alert('ასეთი ჩანაწერი არსებობს')
            else {
                $('.loading-container').removeClass('loading-inactive');

                $.ajax({
                    url: "/SolidWasteAct/CalculateWasteAmount",
                    type: "POST",
                    dataType: "json",
                    data: { customerType: document.getElementById("Type").value, wasteTypeId: document.getElementById("WasteTypeId").value, quantity: document.getElementById("Quantity").value, isInQubeMeter: document.getElementById('IsCubeMeter').checked },
                    success: function (data) {

                        if ($editorMode == 'ADD') {

                            $itemIncriment++;

                            editButton = '<td><button type="button" id="edit' + $itemIncriment + '"' +
                                          'onClick="EditButtonClickHandler(' + data.WasteTypeId + ')"  ' +
                                         'class="btn btn-default btn-sm" data-toggle="modal" data-target="#SolidWasteActDetailEditor"><span class="glyphicon glyphicon-edit"></span></button>'

                            removeButton = '<button type="button" id="remove' + $itemIncriment + '"' +
                                            'onClick="RemoveFromItemSource(' + data.WasteTypeId + ')"  ' +
                                           ' class="btn btn-default btn-sm"><span class="glyphicon glyphicon-remove"></span></button></td>'

                            var hidden = '<input type="hidden" id="hidden' + data.WasteTypeId + '" value="Norway">'
                            var row = '<tr><td class="trWasteTypeName">' + data.WasteTypeName +
                                       '</td> <td class="trQuantity">' + data.Quantity +
                                       '</td> <td class="trUnitPrice">' + data.UnitPrice +
                                       '</td><td class="trAmount">' + data.Amount +
                                        '</td>' + editButton + removeButton + ' </tr>' + hidden;

                            $('#SolidWastActDetailTable tr:last').after(row);

                            $('#edit' + $itemIncriment).unbind("click");
                            $('#edit' + $itemIncriment).bind("click", EditButtonClickUpdateQuantity);

                            $('#remove' + $itemIncriment).unbind("click");
                            $('#remove' + $itemIncriment).bind("click", RemoveButtonClickHandler);

                            $itemSource.push({
                                Id: $itemIncriment,
                                WasteTypeId: data.WasteTypeId,
                                Quantity: data.Quantity,
                                UnitPrice: data.UnitPrice,
                                Amount: data.Amount
                            });

                            $('#btClose').click();
                        }
                        else {

                            $selectedRow.find(".trWasteTypeName").html(data.WasteTypeName);
                            $selectedRow.find(".trQuantity").html(data.Quantity);
                            $selectedRow.find(".trUnitPrice").html(data.UnitPrice);
                            $selectedRow.find(".trAmount").html(data.Amount);

                            UpdateItemSource(data.WasteTypeId, data.Quantity, data.UnitPrice, data.Amount);

                            $('#btClose').click();
                        }

                        $('.loading-container')
                       .addClass('loading-inactive');
                    },
                    error: function (textStatus, errorThrown) {
                        $('.loading-container')
                       .addClass('loading-inactive');
                        alert('მოხდა შეცდომა')
                    }

                });
            }
        });

        function EditButtonClickHandler(wasteTypeID) {
            var $wasteTypeItemSource = $("#WasteTypeId").select2();

            $wasteTypeItemSource.val(wasteTypeID).trigger("change");
            $editId = FindItem(wasteTypeID).Id;
            $editorMode = 'EDIT';
        }

        function EditButtonClickUpdateQuantity() {
            $selectedRow = $(this).closest("tr");
            var quantity = $selectedRow.find(".trQuantity").text();

            document.getElementById("Quantity").value = quantity;
        }

        function RemoveFromItemSource(wasteTypeId) {
            for (var i = 0; i < $itemSource.length; i++) {
                if ($itemSource[i].WasteTypeId == wasteTypeId) {
                    $itemSource.splice(i, 1);
                    return;
                }
            }
        }

        function RemoveButtonClickHandler() {
            $(this).closest("tr").remove();
        }

        $("#ReceiverName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/SolidWasteAct/LoadReciever",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Description, value: item.ReceiverName, ReceiverLastName: item.ReceiverLastName, Posistion: item.Posistion };
                        }))
                    }
                })
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            response: function (e, u) {
                $(this).removeClass('loader');
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {

                document.getElementById("ReceiverLastName").value = ui.item.ReceiverLastName
                document.getElementById("PositionName").value = ui.item.Posistion

            }

        });

        $("#CustomerCode").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/SolidWasteAct/LoadCustomerByCode",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term, CustomerType: document.getElementById("Type").value },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Description, value: item.Code, Name: item.Name, ContactInfo: item.ContactInfo, RepresentativeName: item.RepresentativeName, CarNumber: item.CarNumber, CarModel: item.CarModel, DriverInfo: item.DriverInfo };
                        }))
                    }
                })
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            response: function (e, u) {
                $(this).removeClass('loader');
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {

                document.getElementById("CustomerName").value = ui.item.Name
                document.getElementById("CustomerContactInfo").value = ui.item.ContactInfo
                document.getElementById("RepresentativeName").value = ui.item.RepresentativeName
                document.getElementById("TransporterCarNumber").value = ui.item.CarNumber
                document.getElementById("TransporterCarModel").value = ui.item.CarModel
                document.getElementById("TransporterDriverInfo").value = ui.item.DriverInfo
            }

        });

        $("#CustomerName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/SolidWasteAct/LoadCustomerByName",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term, CustomerType: document.getElementById("Type").value },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Description, value: item.Name, Code: item.Code, ContactInfo: item.ContactInfo, RepresentativeName: item.RepresentativeName, CarNumber: item.CarNumber, CarModel: item.CarModel, DriverInfo: item.DriverInfo };
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            response: function (e, u) {
                $(this).removeClass('loader');
            },
            select: function (event, ui) {

                document.getElementById("CustomerCode").value = ui.item.Code
                document.getElementById("CustomerContactInfo").value = ui.item.ContactInfo
                document.getElementById("RepresentativeName").value = ui.item.RepresentativeName
                document.getElementById("TransporterCarNumber").value = ui.item.CarNumber
                document.getElementById("TransporterCarModel").value = ui.item.CarModel
                document.getElementById("TransporterDriverInfo").value = ui.item.DriverInfo
            }

        });

        $("#TransporterCarNumber").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/SolidWasteAct/LoadTransporter",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Description, value: item.CarNumber, CarModel: item.CarModel, DriverInfo: item.DriverInfo };
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            response: function (e, u) {
                $(this).removeClass('loader');
            },
            select: function (event, ui) {

                //document.getElementById("TransporterCarNumber").value = ui.item.CarNumber
                document.getElementById("TransporterCarModel").value = ui.item.CarModel
                document.getElementById("TransporterDriverInfo").value = ui.item.DriverInfo
            }

        });

        $("#TransporterCarModel").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/SolidWasteAct/LoadCarModel",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item, value: item };
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            response: function (e, u) {
                $(this).removeClass('loader');
            },
        });

        $('#Type').change(function () {

            $itemSource = [];
            $("#SolidWastActDetailTable").find("tr:not(:first)").remove();
        });

    </script>
}
